{"version":3,"sources":["components/Item.jsx","components/Title.jsx","components/TODOlist.jsx","App.js","serviceWorker.js","index.js"],"names":["Item","props","key","id","text","onClick","delete","Title","TODOlist","state","data","AddToDo","e","document","getElementById","value","length","lenght","console","log","element","newarray","concat","LocalSave","setState","JSON","parse","localStorage","getItem","setItem","stringify","type","name","this","map","item","DeleteLocal","newData","target","forEach","index","React","Component","App","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2OAEaA,G,MAAO,SAACC,GAAD,OACZ,yBAAKC,IAAKD,EAAMC,IAAKC,GAAG,QACpB,2BAAIF,EAAMG,MACV,4BAAQC,QAASJ,EAAMK,OAAQH,GAAIF,EAAME,IAAzC,aCHCI,EAAM,kBACnB,yBAAKJ,GAAG,SACJ,wCCCEK,E,YACF,aAAe,IAAD,uBACV,+CAUJC,MAAQ,CACJC,KAAM,IAZI,EAgCdC,QAAU,SAACC,GACP,IAAIR,EAAOS,SAASC,eAAe,aAAaC,MAChD,GAAIX,EAAKY,OAAS,EAAG,CACjB,IAAMb,EAAK,EAAKM,MAAMC,KAAKO,QAAU,EACrCC,QAAQC,IAAI,EAAKV,MAAMC,KAAKM,QAC5B,IAAMI,EAAU,CAAC,CAAEjB,GAAIA,EAAIC,KAAMA,IAC3BiB,EAAW,EAAKZ,MAAMC,KAAKY,OAAOF,GACxC,EAAKG,UAAUF,GACf,EAAKG,SAAS,CAAEd,KAAMW,IAE1BjB,EAAO,MAvCP,IACI,EAAKK,MAAQ,CAAEC,KAAMe,KAAKC,MAAMC,aAAaC,QAAQ,UACvD,MAAOhB,GACL,EAAKH,MAAQ,CAAEC,KAAM,IACrBiB,aAAaC,QAAQ,OAAQ,MAPvB,S,uEAcJlB,GACNiB,aAAaE,QAAQ,OAAQJ,KAAKK,UAAUpB,M,+BA8BtC,IAAD,OACL,OACI,yBAAKP,GAAG,WACJ,kBAAC,EAAD,MACA,yBAAKA,GAAG,QACJ,2BAAO4B,KAAK,OAAOC,KAAK,OAAO7B,GAAG,cAClC,4BAAQA,GAAG,SAASE,QAAS4B,KAAKtB,SAAlC,QAGHsB,KAAKxB,MAAMC,KAAKwB,KAAI,SAAAC,GAAI,OAAI,kBAAC,EAAD,CAAMjC,IAAKiC,EAAKhC,GAAIA,GAAIgC,EAAKhC,GAAIG,OAAQ,EAAK8B,YAAahC,KAAM+B,EAAK/B,c,mCArC5FQ,GACf,IAEIyB,EAFElC,EAAKS,EAAE0B,OAAOnC,GACNsB,KAAKC,MAAMC,aAAaC,QAAQ,SAEtCW,SAAQ,SAACJ,EAAMK,GACfL,EAAKhC,KAAOA,IACZkC,GAAWF,MAInBR,aAAaE,QAAQ,OAAQJ,KAAKK,UAAUO,IAC5CJ,KAAKT,SAAS,CAAEd,KAAM2B,IAEtBnB,QAAQC,IAAIP,EAAE0B,OAAOnC,Q,GA/BNsC,IAAMC,WCOdC,MARf,WACE,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAStC,SAASC,eAAe,SD2H3C,kBAAmBsC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.f938c4e7.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const Item = (props)=>\r\n        <div key={props.key} id=\"item\">\r\n            <p>{props.text}</p>\r\n            <button onClick={props.delete} id={props.id}>Delete</button>\r\n        </div>\r\n        ","import React from 'react';\r\n\r\nexport const Title=()=>\r\n<div id=\"title\">\r\n    <h1>TODO's</h1>\r\n</div>","import React from 'react';\r\nimport './main.css';\r\nimport { Item } from './Item';\r\nimport { Title } from './Title';\r\n\r\nclass TODOlist extends React.Component {\r\n    constructor() {\r\n        super()\r\n        \r\n        try {\r\n            this.state = { data: JSON.parse(localStorage.getItem('data')) }\r\n        } catch (e) {\r\n            this.state = { data: [] }\r\n            localStorage.getItem('data', '[]')\r\n        }\r\n\r\n    }\r\n    state = {\r\n        data: []\r\n    }\r\n    LocalSave(data) {\r\n        localStorage.setItem('data', JSON.stringify(data));\r\n    }\r\n    static DeleteLocal(e) {\r\n        const id = e.target.id\r\n        var oldData = JSON.parse(localStorage.getItem('data'));\r\n        var newData;\r\n        oldData.forEach((item, index) => {\r\n            if (item.id !== id) {\r\n                newData += item\r\n            }\r\n        })\r\n\r\n        localStorage.setItem('data', JSON.stringify(newData));\r\n        this.setState({ data: newData })\r\n\r\n        console.log(e.target.id)\r\n    }\r\n    AddToDo = (e) => {\r\n        var text = document.getElementById(\"textInput\").value;\r\n        if (text.length > 1) {\r\n            const id = this.state.data.lenght || 0;\r\n            console.log(this.state.data.length)\r\n            const element = [{ id: id, text: text }];\r\n            const newarray = this.state.data.concat(element);\r\n            this.LocalSave(newarray);\r\n            this.setState({ data: newarray });\r\n        }\r\n        text = null;\r\n\r\n    }\r\n    render() {\r\n        return (\r\n            <div id=\"content\">\r\n                <Title />\r\n                <div id=\"form\">\r\n                    <input type=\"text\" name=\"text\" id=\"textInput\" />\r\n                    <button id=\"addBtn\" onClick={this.AddToDo}>add</button>\r\n\r\n                </div>\r\n                {this.state.data.map(item => <Item key={item.id} id={item.id} delete={this.DeleteLocal} text={item.text} />)}\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\nexport { TODOlist }","import React from 'react';\nimport {TODOlist} from './components/TODOlist';\n\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <TODOlist/>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}